#!/usr/bin/env python2

from __future__ import division
import sys, os
import argparse

def _parse_args():
    parser = argparse.ArgumentParser(description='',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('in_path')
    parser.add_argument('out_path')
    parser.add_argument('test_name')
    parser.add_argument('--append',
        required=False, action="store_true")
    # parser.add_argument('--header',
    #         required=False, action="store_true")
    return parser.parse_args()

def is_empty(fpath):
    return not os.path.exists(fpath) or os.stat(fpath).st_size == 0

args = _parse_args()
in_path = args.in_path
out_path = args.out_path
name = args.test_name
open_mode='a+' if args.append else 'w'

with open(in_path, 'r') as ifile:
    measures = [float(l.strip()) for l in ifile]


header="<style type=\"text/css\">\n"
header+=".tg  {border-collapse:collapse;border-spacing:0;}\n"
header+=".tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n"
header+=".tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n"
header+=".tg .tg-fymr{font-weight:bold;border-color:inherit;text-align:left;vertical-align:top}\n"
header+=".tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n"
header+="</style>\n"
header+="<table class=\"tg\">\n"
header+="\t<tr>\n"
header+="\t\t<th class=\"tg-fymr\">test_name</th>\n"
header+="\t\t<th class=\"tg-fymr\">n</th>\n"
header+="\t\t<th class=\"tg-fymr\">tmin_time</th>\n"
header+="\t\t<th class=\"tg-fymr\">avg_time</th>\n"
header+="\t\t<th class=\"tg-fymr\">max_time</th>\n"
header+="\t</tr>\n"

n = len(measures)
min_time = min(measures)
max_time = max(measures)
mean_time = sum(measures) / n

add_header = is_empty(out_path) or open_mode == 'w'
with open(out_path, open_mode) as ofile:
    if add_header:
        ofile.write(header)
    ofile.write("\t<tr>\n\t\t<td class=\"tg-0pky\">{0}</td>\n\t\t<td class=\"tg-0pky\">{4}</td>\n\t\t<td class=\"tg-0pky\">{1:.3f}</td>\n\t\t<td class=\"tg-0pky\">{2:.3f}</td>\n\t\t<td class=\"tg-0pky\">{3:.3f}</td>\n\t</tr>\n".format(name, min_time, mean_time, max_time, n))
