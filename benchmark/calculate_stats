#!/usr/bin/env python2

from __future__ import division
import sys, os
import argparse

def _parse_args():
    parser = argparse.ArgumentParser(description='',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('in_path')
    parser.add_argument('out_path')
    parser.add_argument('test_name')
    parser.add_argument('--append',
        required=False, action="store_true")
    # parser.add_argument('--header',
    #         required=False, action="store_true")
    return parser.parse_args()

def is_empty(fpath):
    return not os.path.exists(fpath) or os.stat(fpath).st_size == 0

args = _parse_args()
in_path = args.in_path
out_path = args.out_path
name = args.test_name
open_mode='a+' if args.append else 'w'

with open(in_path, 'r') as ifile:
    measures = [float(l.strip()) for l in ifile]

header="test_name\tn\tmin_time\tavg_time\tmax_time\n"
n = len(measures)
min_time = min(measures)
max_time = max(measures)
mean_time = sum(measures) / n

add_header = is_empty(out_path) or open_mode == 'w'

with open(out_path, open_mode) as ofile:
    if add_header:
        ofile.write(header)
    ofile.write("{0}\t{4}\t{1:.3f}\t{2:.3f}\t{3:.3f}\n".format(name, min_time, mean_time, max_time, n))
