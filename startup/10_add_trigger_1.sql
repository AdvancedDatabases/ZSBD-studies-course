/*
Zwiększenie o 10% ceny takich produktów, które w ciągu ostatnich trzech miesięcy
znajdowały się na liście top 1000 najczęściej zamawianych produktów. ~1000
*/

/*
SAVEPOINT BEFORE_q52;

UPDATE PRODUCTS
SET LIST_PRICE = (LIST_PRICE + LIST_PRICE * 0.1)
WHERE PRODUCT_ID IN
    (SELECT PRODUCT_ID from (SELECT PRODUCT_ID, COUNT(*) FROM (SELECT p.PRODUCT_ID, p.PRODUCT_NAME, o.ORDER_DATE
    FROM PRODUCTS p JOIN ORDER_ITEMS oi on p.PRODUCT_ID = oi.PRODUCT_ID
        JOIN ORDERS o on oi.ORDER_ID = o.ORDER_ID
    WHERE ROUND(MONTHS_BETWEEN(sysdate, order_date),0) <= 3)
    GROUP BY PRODUCT_ID
    ORDER BY 2 DESC
    FETCH FIRST 1000 ROWS ONLY));

rollback;
-- check before and after update
*/
-- drop TRIGGER SMALLER_STOCK_HIGHER_RISE;

CREATE OR REPLACE TRIGGER SMALLER_STOCK_HIGHER_RISE
BEFORE UPDATE OF LIST_PRICE
ON PRODUCTS
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    l_prod_quantity INVENTORIES.QUANTITY%TYPE;
BEGIN
    select sum(i.QUANTITY) prod_quantity INTO l_prod_quantity
    FROM PRODUCTS p join INVENTORIES i ON p.PRODUCT_ID = i.PRODUCT_ID
    WHERE p.PRODUCT_ID = :OLD.PRODUCT_ID;
    IF (l_prod_quantity < 1000) THEN
        -- 50% increase
        :NEW.LIST_PRICE := :OLD.LIST_PRICE + 0.5 * :OLD.LIST_PRICE;
--         :NEW.LIST_PRICE := 1.0;
    COMMIT;
    END IF;
END;

-- check if 4531 was increased and 9495 was not increased
/*
select PRODUCT_ID, LIST_PRICE
FROM PRODUCTS
    WHERE PRODUCT_ID IN (4531, 9495);
*/
/*
select sum(i.QUANTITY) prod_quantity FROM PRODUCTS p join INVENTORIES i ON p.PRODUCT_ID = i.PRODUCT_ID
WHERE p.PRODUCT_ID = 9495;

SELECT p.PRODUCT_ID, p.LIST_PRICE FROM
(SELECT PRODUCT_ID, COUNT(*) FROM (SELECT p.PRODUCT_ID, p.PRODUCT_NAME, o.ORDER_DATE
FROM PRODUCTS p JOIN ORDER_ITEMS oi on p.PRODUCT_ID = oi.PRODUCT_ID
    JOIN ORDERS o on oi.ORDER_ID = o.ORDER_ID
WHERE ROUND(MONTHS_BETWEEN(sysdate, order_date),0) <= 3)
GROUP BY PRODUCT_ID
ORDER BY 2 DESC
FETCH FIRST 10 ROWS ONLY) q JOIN PRODUCTS p
ON q.PRODUCT_ID = p.PRODUCT_ID;
*/
